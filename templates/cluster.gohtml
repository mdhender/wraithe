<!DOCTYPE html>{{- /* mapping logic derived from // The drawing logic is derived from the article https://www.mamboleoo.be/articles/how-to-render-3d-in-2d-canvas */ -}}
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cluster</title>
    <style>
        body {
            display: flex;
            margin: 0;
            align-items: center;
            justify-content: center;
            height: 100vh;
        }

        canvas {
            width: 98vmin;
            height: 98vmin;
        }
    </style>
</head>
<body>
<canvas id="scene"></canvas>
<script>
	console.clear();

	const canvas = document.querySelector('#scene'); // Get the canvas element from the DOM

	canvas.width = canvas.clientWidth;
	canvas.height = canvas.clientHeight;

	const ctx = canvas.getContext('2d'); // Store the 2D context

	if (window.devicePixelRatio > 1) {
		canvas.width = canvas.clientWidth * 2;
		canvas.height = canvas.clientHeight * 2;
		ctx.scale(2, 2);
	}
	{{- /* ====================== */
	    /* ====== VARIABLES ===== */
	    /* ====================== */ -}}
	let width = canvas.clientWidth; // Width of the canvas
	let height = canvas.clientHeight; // Height of the canvas
	let rotation = 0; // Rotation of the globe
    let rotationTick = 0.0002; // How much to rotate each frame
	let dots = []; // Every dot must be in this array
    {{- /* ====================== */
	    /* ====== CONSTANTS ===== */
	    /* ====================== */
	    /* Some of those constants may change if the user resizes their
	       screen but I still strongly believe they belong to the
	       Constants part of the variables */ -}}
	const DOTS_AMOUNT = 1000; // Amount of dots on the screen
	const DOT_RADIUS = 4; // Radius of the dots
	let GLOBE_RADIUS = width * 0.7; // Radius of the globe
	let GLOBE_CENTER_Z = -GLOBE_RADIUS; // Z value of the globe center
	let PROJECTION_CENTER_X = width / 2; // X center of the canvas HTML
	let PROJECTION_CENTER_Y = height / 2; // Y center of the canvas HTML
	let FIELD_OF_VIEW = width * 0.8;

	class Dot {
		constructor(ring, size, color, x, y, z) {
            this.size = size;
			this.ring = ring;
			this.fillStyle = color; // 'rgb(' + (Math.floor(Math.random() * 255)) + ', ' + (Math.floor(Math.random() * 255)) + ',' + (Math.floor(Math.random() * 255)) + ')';
            // the div by 15 is an attempt to scale the cluster to fit the entire view port
			this.x = GLOBE_RADIUS * x / 15.0;
			this.y = GLOBE_RADIUS * y / 15.0;
			this.z = GLOBE_RADIUS * z / 15.0 + GLOBE_CENTER_Z;
			this.xProject = 0;
			this.yProject = 0;
			this.sizeProjection = 0;
		}
		project(sin, cos) { // Do some math to project the 3D position into the 2D canvas
			const rotX = cos * this.x + sin * (this.z - GLOBE_CENTER_Z);
			const rotZ = -sin * this.x + cos * (this.z - GLOBE_CENTER_Z) + GLOBE_CENTER_Z;
			this.sizeProjection = FIELD_OF_VIEW / (FIELD_OF_VIEW - rotZ);
			this.xProject = (rotX * this.sizeProjection) + PROJECTION_CENTER_X;
			this.yProject = (this.y * this.sizeProjection) + PROJECTION_CENTER_Y;
		}
		draw(sin, cos) { // Draw the dot on the canvas
			this.project(sin, cos);
			//ctx.fillRect(this.xProject - DOT_RADIUS, this.yProject - DOT_RADIUS, DOT_RADIUS * 2 * this.sizeProjection, DOT_RADIUS * 2 * this.sizeProjection);
			ctx.fillStyle = this.fillStyle;
			ctx.beginPath();
			ctx.arc(this.xProject, this.yProject, (DOT_RADIUS+3*this.size) * this.sizeProjection, 0, Math.PI * 2);
			ctx.closePath();
			ctx.fill();
		}
	}

	function createStars() {
		dots.length = 0; // empty the array of dots
		dots.push(new Dot(0, 0.0, 0.0, 0.0)); // center of sphere
		dots.push(new Dot(15, 0.0, -15.0, 0.0)); // north pole
		dots.push(new Dot(15, 0.0, 15.0, 0.0)); // south pole
		// systems
      {{ range .Systems }}dots.push(new Dot({{ .Ring }}, {{ .Size }}, {{ .Color }}, {{ .X }}, {{ .Y }}, {{ .Z }}));{{ end }}
	}

    {{- /* ====================== */
	    /* ======== RENDER ====== */
	    /* ====================== */ -}}
	function render(a) {
		ctx.clearRect(0, 0, width, height); // Clear the scene
		rotation = a * rotationTick; // Increase the globe rotation
		const sineRotation = Math.sin(rotation); // Sine of the rotation
		const cosineRotation = Math.cos(rotation); // Cosine of the rotation
		// Loop through the dots array and draw every dot
		for (let i = 0; i < dots.length; i++) {
			dots[i].draw(sineRotation, cosineRotation);
		}
		window.requestAnimationFrame(render);
	}

	function afterResize() { // Function called after the user resized its screen
		width = canvas.offsetWidth;
		height = canvas.offsetHeight;
		if (window.devicePixelRatio > 1) {
			canvas.width = canvas.clientWidth * 2;
			canvas.height = canvas.clientHeight * 2;
			ctx.scale(2, 2);
		} else {
			canvas.width = width;
			canvas.height = height;
		}
		GLOBE_RADIUS = width * 0.7;
		GLOBE_CENTER_Z = -GLOBE_RADIUS;
		PROJECTION_CENTER_X = width / 2;
		PROJECTION_CENTER_Y = height / 2;
		FIELD_OF_VIEW = width * 0.8;

		createStars(); // Reset all stars
	}

	let resizeTimeout; // Variable used to store a timeout when user resized its screen

	function onResize() { // Function called right after user resized its screen
		resizeTimeout = window.clearTimeout(resizeTimeout); // Clear the timeout variable
		resizeTimeout = window.setTimeout(afterResize, 500); // Store a new timeout to avoid calling afterResize for every resize event
	}

	window.addEventListener('resize', onResize);
	createStars(); // Populate the dots array with random stars
	window.requestAnimationFrame(render); // Render the scene
</script>
</body>
</html>
